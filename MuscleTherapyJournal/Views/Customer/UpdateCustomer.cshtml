@model MuscleTherapyJournal.Models.CustomerViewModel

@{
    ViewBag.Title = "KundeInformasjon";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@using (Html.BeginForm("UpdateCustomer", "Customer", FormMethod.Post, new { id = "customerForm", autocomplete = "off" }))
{
    <div class="container">
        <h1>KundeInformasjon</h1>
        <hr/>
        @Html.ValidationSummary(true)
        
        <input type="hidden" id="IsFormPostBack" data-something="@Model.IsPostBack" value="@Model.IsPostBack.ToString()" />
        <input type="hidden" id="IsUpdateCustomerSuccess" data-something="@Model.UpdateCustomerSuccess" value="@Model.UpdateCustomerSuccess.ToString()" />
        @Html.HiddenFor(model => model.Customer.CustomerId)
        @Html.HiddenFor(model => model.Customer.CreatedDate)

        <div class="row" id="customerPersist">
            <div class="col-md-8">
                @if (Model.UpdateCustomerSuccess)
                {
                    <div class="alert alert-success update-message" role="alert">
                        @Model.Customer.CustomerName ble lagret i databasen.
                    </div>
                }
                else
                {
                    <div class="alert alert-danger update-message" role="alert">
                        Det skjedde en feil, <b>@Model.Customer.CustomerName</b> ble ikke lagret i databasen. Vennligst prøv igjen.
                    </div>
                }
            </div>
        </div>
        
        <br/>


        <div class="row">
            <div class="col-md-4">
                @Html.LabelFor(model => model.Customer.FirstName, new { @class = "control-label" })
                <div class="form-group">
                    @Html.TextBoxFor(model => model.Customer.FirstName, new { @class = "form-control", @type = "text" })
                    @Html.ValidationMessageFor(model => model.Customer.FirstName, null, new { @class = "has-error" })
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Customer.Surname, new { @class = "control-label" })
                    @Html.TextBoxFor(model => model.Customer.Surname, new { @class = "form-control" })
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Customer.LastName, new { @class = "control-label" })
                    @Html.TextBoxFor(model => model.Customer.LastName, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.Customer.LastName)
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Customer.MobilePhoneNumber, new { @class = "control-label" })
                    @Html.TextBoxFor(model => model.Customer.MobilePhoneNumber, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.Customer.MobilePhoneNumber)
                </div>
                
                <div class="form-group">
                    @Html.LabelFor(model => model.BirthDay, new { @class = "control-label" })
                    <div class="form-inline">
                        @Html.TextBoxFor(model => model.BirthDay, new { type = "text", @class = "datefield form-control" })
                    </div>
                </div>
            </div>

            <div class="col-md-4">
                <div class="form-group">
                    @Html.LabelFor(model => model.Customer.Address, new { @class = "control-label" })
                    @Html.TextBoxFor(model => model.Customer.Address, new { @class = "form-control" })
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Customer.ZipCode, new { @class = "control-label" })
                    @Html.TextBoxFor(model => model.Customer.ZipCode, new { @class = "form-control" })
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Customer.LivingLocation, new { @class = "control-label" })
                    @Html.TextBoxFor(model => model.Customer.LivingLocation, new { @class = "form-control" })
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Customer.Profession, new { @class = "control-label" })
                    @Html.TextBoxFor(model => model.Customer.Profession, new { @class = "form-control" })
                </div>
                
                <div class="form-group">
                    @Html.LabelFor(model => model.Customer.Email, new { @class = "control-label" })
                    @Html.TextBoxFor(model => model.Customer.Email, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.Customer.Email)
                </div>
            </div>

        </div>
        
        <br/>

        <div class="row">
            <div class="col-md-4">

            </div>
            <div class="col-md-4">
                <div class="btn-group">
                    @if (Model.Customer.CustomerId > 0)
                    {
                        <a class="btn btn-default" href="@Url.Action("UpdateCustomer", "Customer")">Ny Kunde</a>
                        <button type="submit" class="btn btn-primary" id="saveCustomer">
                            <i class="fa fa-floppy-o"></i>
                            Oppdater Kunde
                        </button>
                    }
                    else
                    {
                        <a class="btn btn-default" href="@Url.Action("Index", "Search")">Avbryt</a>
                        <button type="submit" class="btn btn-primary" id="saveCustomer">
                            <i class="fa fa-floppy-o"></i>
                            Lagre Ny Kunde
                        </button>
                    }

                </div>
            </div>
            @Html.Partial("_ModalTreatment")


        </div>
    </div>
}

<script type="text/javascript">

    $(document).ready(function () {

        var form = $("#customerForm");

        form.on("submit", function(e) {
            if (form.valid()) {
                $('#myModalLabel').html('<p>Lagrer kunde. Vennligst vent...</p>');
                $("#treatmentModal").modal("show");

                return true;
            }
            return false;

        });

        var isPostBack = ($("#IsFormPostBack").val() === "True");

        if (!isPostBack) {
            $(".update-message").hide();
        }

        if (isPostBack && ($("#IsUpdateCustomerSuccess").val()) === "True") {
            setAllFieldsEmpty();
        }

        if (isPostBack) {
            setTimeout(function () {
                $(".update-message").fadeOut('fast');
            }, 5000);
        }

        $("#Customer_FirstName").blur(function () {
            var firstName = returnNameToUpperCase($("#Customer_FirstName").val());
            setFirstNameValue(firstName);
        });

        $("#Customer_Surname").blur(function () {
            var surName = returnNameToUpperCase($("#Customer_Surname").val());
            setSurNameValue(surName);
        });

        $("#Customer_LastName").blur(function () {
            var lastName = returnNameToUpperCase($("#Customer_LastName").val());
            setLastNameValue(lastName);
        });

        $("#Customer_Address").blur(function () {
            var address = returnNameToUpperCase($("#Customer_Address").val());
            setAddressValue(address);
        });

        $("#Customer_LivingLocation").blur(function () {
            var livingLocation = returnNameToUpperCase($("#Customer_LivingLocation").val());
            setLivingLocationValue(livingLocation);
        });

        $("#Customer_Profession").blur(function () {
            var profession = returnNameToUpperCase($("#Customer_Profession").val());
            setProfessionValue(profession);
        });

        function setAllFieldsEmpty() {
            setFirstNameValue("");
            setSurNameValue("");
            setLastNameValue("");
            setAddressValue("");
            setLivingLocationValue("");
            setProfessionValue("");
            setEmailValue("");
            setBirthdayValue("");
            setZipCodeValue("");
            setPhoneNumberValue("");
        }

        function setFirstNameValue(value) {
            $("#Customer_FirstName").val(value);
        }

        function setSurNameValue(value) {
            $("#Customer_Surname").val(value);
        }

        function setLastNameValue(value) {
            $("#Customer_LastName").val(value);
        }

        function setAddressValue(value) {
            $("#Customer_Address").val(value);
        }

        function setLivingLocationValue(value) {
            $("#Customer_LivingLocation").val(value);
        }

        function setProfessionValue(value) {
            $("#Customer_Profession").val(value);
        }

        function setEmailValue(value) {
            $("#Customer_Email").val(value);
        }

        function setBirthdayValue(value) {
            $("#BirthDay").val(value);
        }

        function setZipCodeValue(value) {
            $("#Customer_ZipCode").val(value);
        }

        function setPhoneNumberValue(value) {
            $("#Customer_MobilePhoneNumber").val(value);
        }
    });


    function returnNameToUpperCase(textBoxValue) {
        return textBoxValue.toLowerCase().replace(/\b[a-z]/g, function (letter) {
            return letter.toUpperCase();
        });
    }

</script>